result <- result + 100
} else if (age < 30) {
result <- result + 30
} else {
if (power > 200) {
result <- result + 30
} else if (power < 100) {
result <- result - 20
}
}
}
# return price/costs
return(result)
}
insurance_costs(160)
insurance_costs(28,170)
list.add(0,5)
list.add(0,9)
list.add(1,3)
list.remove(0)
list.add(1,7)
list.add(3,6)
list.add(1,1)
x <- matrix(c(3,6,1,8,4,7,5,2), ncols = 2)
x <- matrix(c(3,6,1,8,4,7,5,2), ncol = 2)
View(x)
View(x)
s <- 0
for (i in VEC) s <- s + x[i, i]
s <- 0
for (i in x) s <- s + x[i, i]
y <- 0
i <- 0
repeat {
if (y > 9) break
i <- i + 1
y <- y + 3
}
y <- 0
i <- 0
while(y <= 12) y <- y + 3
t <- 0
S <- 0
while (CONDITION) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (CONDITION) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (s %in% 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (s != 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
print(s)
t <- 0
S <- 0
while (t in 1 : 30) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
t <- 0
S <- 0
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
while (s < 4000) {
t <- t + 1
S <- S * 1.02
S <- S + 100
}
set.seed(1)
x <- rnorm(100, mean = 10)
head(x)
summary(x)
mean(x)
max(x)
my_mean <- function(x){
s <- 0
for (i in 1:nrow(x)){
s <- s + x[i]
s <- s + 1
}
print(x) # sum;
print(s) # counter;
}
my_mean(x)
my_mean <- function(x){
s <- 0
for (i in 1:nrow(x)){
s <- s + x[i]
s <- s + 1
}
#print(x) # sum;
#print(s) # counter;
}
View(my_mean)
View(my_mean)
my_mean(x)
my_mean <- function(x){
s <- 0
for (i in 1:length(x)){
s <- s + x[i]
s <- s + 1
}
#print(x) # sum;
#print(s) # counter;
}
my_mean(x)
x
print(x)
print(my_mean(x))
my_mean <- function(x){
s <- 0
for (i in 1:length(x)){
s <- s + x[i]
s <- s + 1
}
print(x) # sum;
print(s) # counter;
}
x
my_mean(x)
my_mean(s)
my_max <- function(x){
max = -inf; ## initialize max
for (i in 1:length(x)){
if (x>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- MAX
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- max
}
print(x)
}
my_max(x)
}
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(x)
}
my_max(x)
my_max <- function(x){
max = 0 ## initialize max
for (i in 1:length(x)){
if (x[i]>max)max <- x[i]
}
print(max)
}
my_max(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
s <- s + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in x){
x_sum <- x_num + 1
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean <- function(x){
x_sum <- 0
x_num <- 0
for (i in 1:length(x)){
x_sum <- x_num + x[i]
x_mean = x_sum/x_num
}
print(x_mean)
}
my_mean(x)
x <- 100
for (t in 1:48){    # loop is equivalent to 1.05^48
x <- x*1.05
}
x
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x < 1e6) break
}
x
t
x <- 100
t <- 0
while (x <= 1e6){
t <- t + 1
x <- 1.05*x
}
x
t
x <- 100
t <-0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
x <- 100
t <- 0
repeat{
t <- t + 1
x <- 1.05*x
if (x <= 1e6) break
}
x
t
c("BSc", "MSc", "PhD")[degree]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
c("BSc", "MSc", "PhD")[degree]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
c("BSc", "MSc", "PhD")[degree]
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names(idx)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names(idx)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
# c("BSc", "MSc", "PhD")[degree]
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
(degree <- c("master", "master", "bachelor", "phd", "bachelor", "master"))
# c("BSc", "MSc", "PhD")[degree]
degree <- factor(degree)
new_names <- c("BSc", "MSc", "PhD")
(idx <- as.integer(degree))
new_names[idx]
c("BSc", "MSc", "PhD")[degree]
c.factor <- function(x, y) {
return(factor(c(as.character(x), as.character(y))))
}
c(degree, degree2)
degree  <- factor(c("master", "bachelor", "bachelor"))
degree2 <- factor(c("phd", "bachelor", "bachelor", "phd"))
c(degree, degree2) # Losing information!!
# coercing both factor objects, # combine two char vecs, & create a new factor out of it;
factor(c(as.character(degree), as.character(degree2)))
# instead we use c() or c.factor() method:
c.factor <- function(x, y) {
return(factor(c(as.character(x), as.character(y))))
}
c(degree, degree2)
pm25 <- c(100, 75, 230, 220, 50)   # Vector for testing
attr(pm25, "limit") <- 150         # Adding attribute 'limit'
class(pm25) <- "threshold"         # Adding class attribute
print(pm25)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/contacts.rda")
load('contacts.rda')
friends$Matze
View(friends)
load('contacts.rda')
friends$Matze
friends$Marc$kids <- c(friends$Marc$kids == "Lea")
fr
as.factor(data, labels = c("Canadian", "Russian", "Australian"), ordered = TRUE)
data <- c(1L, 1L, 1L)
as.factor(data, labels = c("Canadian", "Russian", "Australian"), ordered = TRUE)
factor(data, levels = 1:3, labels = c("Australian", "Russian", "Canadian"), ordered = TRUE)
factor(data, levels = 1:3, labels = c("Australian", "Russian", "Canadian"), ordered = FALSE)
categorical(data, ordered = TRUE)
as.interger(data)
as.integer(data)
summary(data)
levels(fac)
levels(data)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
View(traffic)
View(traffic)
traffic <- traffic["Date"]
traffic <- traffic['Date']
traffic <- traffic[,c(total, date)]
traffic <- traffic[,c("total", "Date")]
d <- as.Date("2017-01-01" 0:365)
d <- as.Date("2017-01-01")
d + 0:365
format(d, "%b","%a")
format(d, "%b%a")
d
date <- d
month <- format(d,"%b")
wday <- format(d,"%a")
traffic <- traffic[,c("total", "date", "month", "wday")]
d
d <- d + 0:365
date <- d
month <- format(d,"%b")
wday <- format(d,"%a")
date
month
wday
traffic <- traffic[,c("date" = date, "month" = month, "wday" = wday)]
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
head(traffic)
(data <- data.frame(value = c(20, 40, 200, 400), label = c("A", "B", "A", "B")))
View(traffic)
min <- tapply(X = traffic$traffic, INDEX = data$month, FUN = min)
min <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = min)
#avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = avg)
max <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = max)
View(traffic)
max
min
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = avg)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = average)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = mean)
avg
match_temperature_units <- function(x) {
match.arg(tolower(x), c("kelvin", "celsius", "fahrenheit"))
}
traffic <- data.frame(total = traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$traffic, INDEX = traffic$month, FUN = max)
traffic <- data.frame(total = traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
View(traffic)
traffic <- data.frame(total = traffic)
View(traffic)
traffic$traffic <- data.frame(total)
traffic$traffic <- data.frame("total")
traffic$traffic <- traffic[, "total"]
traffic <- data.frame(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
traffic$traffic <- traffic[, "total"]
View(traffic)
View(traffic)
names(traffic)[names(traffic) == "traffic"] <- "total"
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/traffic.rda")
traffic <- data.frame(traffic)
names(traffic)[names(traffic) == "traffic"] <- "total"
d <- as.Date("2017-01-01")
d <- d + 0:364
date <- d
month <- factor(format(d,"%b"))
wday <- factor(format(d,"%a"))
traffic$date <- date
traffic$month <- month
traffic$wday <- wday
min <- tapply(X = traffic$total, INDEX = traffic$month, FUN = min)
avg <- tapply(X = traffic$total, INDEX = traffic$month, FUN = mean)
max <- tapply(X = traffic$total, INDEX = traffic$month, FUN = max)
View(traffic)
plot(min, max, avg, type = 'l')
plot(min, max, avg, type = 'l', ylim = range(traffic$total), xlab = 'month', xaxt = 'n', las = 1, ylab = '', main = 'Traffic')
val <- seq:len(nlevels(traffic$month))
val <- seq_len(nlevels(traffic$month))
plot(val, avg, type = 'l', ylim = range(traffic$total), xlab = 'month', xaxt = 'n', las = 1, ylab = '', main = 'Traffic')
lines(val,min,lty = 2)
lines(val,max,lty = 2)
axis(1, val, labels = month.abb)
View(traffic)
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/persons.rda")
load("~/MA/VU introduction into programming with R/win-library/3.6/Archive/Discdownscrpits/persons2.rda")
### Prepare data
setwd("C:/Users/david/OneDrive - uibk.ac.at/MA/VU Geostatistics/Geostatistics/Task02")
#tell R that time is in UTC
Sys.setenv(TZ="GMT")
library(zoo)
linz <- readRDS("LinzHoersching_obs_ECMWF_2009-2022.rds")
linz <- as.data.frame(linz)
linz <- cbind.data.frame(datetime = rownames(linz), linz)
rownames(linz) <- 1:nrow(linz)
write.csv(linz, "LinzHoersching_obs_ECMWF_2009-2022.csv")
